/* PingEchoTacticGrammaire.java */
/* Generated By:JavaCC: Do not edit this line. PingEchoTacticGrammaire.java */
package org.backend.tactics.ping_echo;
import org.backend.tactics.ping_echo.ParseException;
import org.backend.tactics.ping_echo.PingEchoTacticGrammaireConstants;
import org.backend.tactics.ping_echo.Token;

import java.io.InputStream;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.Iterator;
import java.util.Set;
import java.io.ByteArrayInputStream;
public class PingEchoTacticGrammaire implements PingEchoTacticGrammaireConstants {
  public static int i=1;
  public static Map<String, String> map = new HashMap();
  public static Token exceptionHandlingCallee;

  public static Map<String, String> tacticParticipatingObjects = new HashMap();
  public static int numberofChecks = 0;
  public  static StringBuilder parseSteps = new StringBuilder();
  public   static StringBuilder result = new StringBuilder();

  public static void main(String args []) throws ParseException
  {


    try {
              PingEchoTacticGrammaire parser = new PingEchoTacticGrammaire(new java.io.FileInputStream("C:/Users/admin/eclipse-workspace/PingEchoTactic/src/PingEchoTrace.txt"));
            try
                          {
                             parser.PingEcho();

                                  if(!tacticParticipatingObjects.isEmpty()) {
                  System.out.println("\n===================RESULT===================\n");
                                  System.out.println("Tactic participating objects: ");
                                 Set keys = tacticParticipatingObjects.keySet();
                                                Iterator it = keys.iterator();
                                                for(String key : tacticParticipatingObjects.keySet())
                                                {
                                                  String value = tacticParticipatingObjects.get(key);
                                                  System.out.println(key + " -- > " + value);
                                                }

                                          System.out.println("Number of checksin the trace: "+numberofChecks);
                                          System.out.println("\n============================================\n");

                             }

                           } catch (Exception e) {
                System.out.println("Error in Parsing:");
                System.out.println(e.getMessage());
                e.printStackTrace();
            }

        } catch (Exception e) {
            System.out.println("File Not Found or Error Reading File.");
        }

  }
    public  String parseAndGetResult(InputStream inputStream) {
        map.clear();
        tacticParticipatingObjects.clear();
        numberofChecks = 0;
        i = 1;
        result.setLength(0);
        parseSteps.setLength(0);
        try {
            PingEchoTacticGrammaire parser = new PingEchoTacticGrammaire(inputStream);
        try {
            parser.PingEcho();

            if (!tacticParticipatingObjects.isEmpty()) {
                result.append("\n===================RESULT===================\n");
                result.append("Tactic participating objects: \n");
                Set keys = tacticParticipatingObjects.keySet();
                Iterator it = keys.iterator();
                for (String key : tacticParticipatingObjects.keySet()) {
                    String value = tacticParticipatingObjects.get(key);
                    result.append(key + " -- > " + value + "\n");
                }

                result.append("Number of checks in the trace: " + numberofChecks + "\n");
                result.append("\n============================================\n");

            } else {
                result.append("\nNo Cache Tactic detected.\n");
            }
        }catch (Exception e) {
            result.append("Parsing Error: ").append(e.getMessage()).append("\n");
        }

    } catch (Exception e) {
        result.append("File Error: ").append(e.getMessage()).append("\n");
    }

    // Add the steps from inside the grammar rules
        result.append(parseSteps.toString());

        return result.toString();
    }


  final public void PingEcho() throws ParseException {
    A();
    B();
    C();
}

// A ici représente l'appel de la méthode ping()
  final public void A() throws ParseException {Token caller, callee;
    jj_consume_token(CALLER);
    caller = jj_consume_token(LITERAL);
map.put("caller", caller.image);
    jj_consume_token(COMMA);
    M();
    callee = jj_consume_token(LITERAL);
map.put("callee", callee.image);
    jj_consume_token(COMMAP);
}

// B ici représente l'appel de la méthode echo()
  final public void B() throws ParseException {Token caller, callee;
    if (getToken(2).image.equals(map.get("callee")) && !getToken(2).image.equals(map.get("caller"))) {
      jj_consume_token(CALLER);
      caller = jj_consume_token(LITERAL);
      jj_consume_token(COMMA);
      M();
      callee = jj_consume_token(LITERAL);
if(!callee.image.equals(map.get("caller"))) {{if (true) throw new ParseException(" Not expected callee");}}
     else
     {
         result.append("\n==>The Ping Echo tactic is detected at line "+i);
         result.append("\n");
         result.append(map.get("caller") + "--Ping-->" + map.get("callee"));
         result.append("\n");
         result.append(map.get("callee") + "--Echo-->" + map.get("caller"));
         result.append("\n");
       tacticParticipatingObjects.put("PingSender", callee.image);
       tacticParticipatingObjects.put("PingReceiver", caller.image);
       numberofChecks++;
       i=i+1;
     }
      jj_consume_token(COMMAP);
    } else if (jj_2_1(1)) {
      E();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
}

// bloc optionnel
  final public void E() throws ParseException {Token caller, callee;
    if (getToken(2).image.equals(map.get("caller")) && !getToken(2).image.equals(map.get("callee"))) {
      jj_consume_token(CALLER);
      caller = jj_consume_token(LITERAL);
      jj_consume_token(COMMA);
      M();
      exceptionHandlingCallee = jj_consume_token(LITERAL);
      jj_consume_token(COMMAP);
if(exceptionHandlingCallee.image.equals(map.get("caller")) || exceptionHandlingCallee.image.equals(map.get("callee"))) {{if (true) throw new ParseException(" Not expected exception Handler");}}
             else {
               tacticParticipatingObjects.put("exception Handler", exceptionHandlingCallee.image);
               map.put("exception Handler", exceptionHandlingCallee.image);
            F();
          }
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case CALLER:{
    	 i++;
        PingEcho();
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
}

  final public void F() throws ParseException {Token caller, callee;
    if ((getToken(2).image.equals(map.get("exception Handler")) && getToken(8).image.equals(map.get("exception Handler")))) {
      jj_consume_token(CALLER);
      caller = jj_consume_token(LITERAL);
      jj_consume_token(COMMA);
      M();
      callee = jj_consume_token(LITERAL);
      jj_consume_token(COMMAP);
      G();
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case CALLER:{
        i=i+2;
        PingEcho();
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
}

  final public void G() throws ParseException {Token caller, callee;
    if (getToken(2).image.equals(map.get("callee"))) {
      jj_consume_token(CALLER);
      caller = jj_consume_token(LITERAL);
      jj_consume_token(COMMA);
      M();
      callee = jj_consume_token(LITERAL);
if(!callee.image.equals(map.get("caller"))) {{if (true) throw new ParseException(" Not expected callee");}}
     else
     { result.append("\n==>The Ping Echo tactic is detected at line "+i);
       result.append("\n");
       result.append(map.get("caller") + "--Ping-->" + map.get("callee"));
       result.append("\n");
       result.append(map.get("caller") + "--notifyException-->" + map.get("exception Handler"));
       result.append("\n");
       result.append(map.get("exception Handler") + "--handleException-->" + map.get("exception Handler"));
       result.append("\n");
       result.append(map.get("callee") + "--Echo-->" + map.get("caller"));
       result.append("\n");
       tacticParticipatingObjects.put("PingSender", callee.image);
       tacticParticipatingObjects.put("PingReceiver", caller.image);
       numberofChecks++;
       i=i+3;
     }
      jj_consume_token(COMMAP);
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case CALLER:{
        i=i+3;
        PingEcho();
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
}

// la c'est le fragment de boucle
  final public void C() throws ParseException {Token caller, callee;
  i++;
    if (getToken(2).image.equals(map.get("caller"))) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case CALLER:{
        A();
        B();
        C();
        break;
        }
      default:
        jj_la1[3] = jj_gen;
        ;
      }
    } else {
      H();
    }
}

  final public void H() throws ParseException {Token caller, callee;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case CALLER:{
      jj_consume_token(CALLER);
      caller = jj_consume_token(LITERAL);
      jj_consume_token(COMMA);
      M();
      callee = jj_consume_token(LITERAL);
      jj_consume_token(COMMAP);
      C();
      break;
      }
    default:
      jj_la1[4] = jj_gen;
      ;
    }
}

  final public void M() throws ParseException {
    jj_consume_token(METHOD);
    jj_consume_token(LITERAL);
    jj_consume_token(COMMA);
    jj_consume_token(CALLEE);
}

  private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_1()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_3R_PingEcho_94_4_4()
 {
    if (jj_3R_A_100_5_5()) return true;
    return false;
  }

  private boolean jj_3R_A_100_5_5()
 {
    if (jj_scan_token(CALLER)) return true;
    return false;
  }

  private boolean jj_3R_E_154_6_3()
 {
    if (jj_3R_PingEcho_94_4_4()) return true;
    return false;
  }

  private boolean jj_3_1()
 {
    if (jj_3R_E_139_4_1()) return true;
    return false;
  }

  private boolean jj_3R_E_139_4_2()
 {
    if (jj_scan_token(CALLER)) return true;
    return false;
  }

  private boolean jj_3R_E_139_4_1()
 {
    Token xsp;
    xsp = jj_scanpos;
    jj_lookingAhead = true;
    jj_semLA = getToken(2).image.equals(map.get("caller"));
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_E_139_4_2()) {
    jj_scanpos = xsp;
    if (jj_3R_E_154_6_3()) return true;
    }
    return false;
  }

  /** Generated Token Manager. */
  public PingEchoTacticGrammaireTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  /** Whether we are looking ahead. */
  private boolean jj_lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[5];
  static private int[] jj_la1_0;
  static {
	   jj_la1_init_0();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x40,0x40,0x40,0x40,0x40,};
	}
  final private JJCalls[] jj_2_rtns = new JJCalls[1];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public PingEchoTacticGrammaire(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public PingEchoTacticGrammaire(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new PingEchoTacticGrammaireTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 5; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 5; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public PingEchoTacticGrammaire(java.io.Reader stream) {
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new PingEchoTacticGrammaireTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 5; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new PingEchoTacticGrammaireTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 5; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public PingEchoTacticGrammaire(PingEchoTacticGrammaireTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 5; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(PingEchoTacticGrammaireTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 5; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   if (++jj_gc > 100) {
		 jj_gc = 0;
		 for (int i = 0; i < jj_2_rtns.length; i++) {
		   JJCalls c = jj_2_rtns[i];
		   while (c != null) {
			 if (c.gen < jj_gen) c.first = null;
			 c = c.next;
		   }
		 }
	   }
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error {
    @Override
    public Throwable fillInStackTrace() {
      return this;
    }
  }
  static private final LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
	 if (jj_scanpos == jj_lastpos) {
	   jj_la--;
	   if (jj_scanpos.next == null) {
		 jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
	   } else {
		 jj_lastpos = jj_scanpos = jj_scanpos.next;
	   }
	 } else {
	   jj_scanpos = jj_scanpos.next;
	 }
	 if (jj_rescan) {
	   int i = 0; Token tok = token;
	   while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
	   if (tok != null) jj_add_error_token(kind, i);
	 }
	 if (jj_scanpos.kind != kind) return true;
	 if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
	 return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
	 Token t = jj_lookingAhead ? jj_scanpos : token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
	 if (pos >= 100) {
		return;
	 }

	 if (pos == jj_endpos + 1) {
	   jj_lasttokens[jj_endpos++] = kind;
	 } else if (jj_endpos != 0) {
	   jj_expentry = new int[jj_endpos];

	   for (int i = 0; i < jj_endpos; i++) {
		 jj_expentry[i] = jj_lasttokens[i];
	   }

	   for (int[] oldentry : jj_expentries) {
		 if (oldentry.length == jj_expentry.length) {
		   boolean isMatched = true;

		   for (int i = 0; i < jj_expentry.length; i++) {
			 if (oldentry[i] != jj_expentry[i]) {
			   isMatched = false;
			   break;
			 }

		   }
		   if (isMatched) {
			 jj_expentries.add(jj_expentry);
			 break;
		   }
		 }
	   }

	   if (pos != 0) {
		 jj_lasttokens[(jj_endpos = pos) - 1] = kind;
	   }
	 }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[11];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 5; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 11; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 jj_endpos = 0;
	 jj_rescan_token();
	 jj_add_error_token(0, 0);
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  private boolean trace_enabled;

/** Trace enabled. */
  final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
	 jj_rescan = true;
	 for (int i = 0; i < 1; i++) {
	   try {
		 JJCalls p = jj_2_rtns[i];

		 do {
		   if (p.gen > jj_gen) {
			 jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
			 switch (i) {
			   case 0: jj_3_1(); break;
			 }
		   }
		   p = p.next;
		 } while (p != null);

		 } catch(LookaheadSuccess ls) { }
	 }
	 jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
	 JJCalls p = jj_2_rtns[index];
	 while (p.gen > jj_gen) {
	   if (p.next == null) { p = p.next = new JJCalls(); break; }
	   p = p.next;
	 }

	 p.gen = jj_gen + xla - jj_la; 
	 p.first = token;
	 p.arg = xla;
  }

  static final class JJCalls {
	 int gen;
	 Token first;
	 int arg;
	 JJCalls next;
  }

}
